// Define default values
generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

// Algorithm
model AlgorithmSession {
  id String @id @default(cuid())

  isPublic Boolean
  password String? @db.VarChar(255)
  name     String  @db.VarChar(255)
  quiz     String?

  createdAt DateTime @default(now()) @db.Timestamp(0)

  chats        AlgorithmChat[]
  participants AlgorithmSessionParticipant[]

  @@map("algorithm_session")
}

model AlgorithmSessionParticipant {
  id Int @id @default(autoincrement())

  sessionId      String  @db.VarChar(255)
  userId         String  @db.VarChar(255)
  isAdmin        Boolean @default(false)
  code           String
  answerDeclared Boolean

  createdAt DateTime @default(now()) @db.Timestamp(0)

  session AlgorithmSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats   AlgorithmChat[]

  @@unique([sessionId, userId])
  @@index([sessionId])
  @@index([userId])
  @@map("algorithm_session_participant")
}

model AlgorithmChat {
  id Int @id @default(autoincrement())

  sessionId     String @db.VarChar(255)
  participantId Int
  message       String @db.Text

  createdAt DateTime @default(now()) @db.Timestamp(0)

  participant      AlgorithmSessionParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  AlgorithmSession AlgorithmSession?           @relation(fields: [sessionId], references: [id])

  @@index([participantId])
  @@index([sessionId])
  @@map("algorithm_chat")
}

// Todo List
model TodolistTodo {
  id Int @id @default(autoincrement())

  title       String   @db.VarChar(255)
  text        String   @db.VarChar(255)
  userId      String   @db.VarChar(255)
  dueAt       DateTime @db.Timestamp(0)
  completedAt DateTime @db.Timestamp(0)

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("todo_list_todo")
}

// Post
model WwwPost {
  id Int @id @default(autoincrement())

  title String @db.VarChar(255)
  text  String @db.VarChar(255)

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@map("www_post")
}

// Next Auth
model Account {
  id String @id @default(cuid())

  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamp(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model User {
  id String @id @default(cuid())

  name          String
  email         String?   @unique
  emailVerified DateTime? @db.Timestamp(0)
  image         String?
  color         String

  accounts          Account[]
  sessions          Session[]
  todolistTodos     TodolistTodo[]
  algorithmSessions AlgorithmSessionParticipant[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(0)

  @@unique([identifier, token])
  @@map("verification_token")
}
